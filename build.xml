<?xml version="1.0"?>
<project name="Ser321 Message Management with JsonRPC" default="targets" basedir="." xmlns="antlib:org.apache.tools.ant">
	<taskdef resource="cpptasks.tasks" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

	<property name="src" value="./src" />
	<property name="lib" value="./lib" />
	<property name="src.cpp.dir" value="src" />
	<property name="obj.dir" value="obj" />
	<property name="dist.dir" value="bin" />
	<property name="classes.dir" value="classes" />
	<property name="host.name" value="127.0.0.1" />
	<!-- localhost-->
	<property name="port.num" value="1099" />
	<!-- Dport1099-->
	<property name="json.file.name" value="messages.json" />
	<property environment="env" />

	<!--Set the ostype property: <property name="ostype" value="${env.OSTYPE}"/>-->
	<condition property="ostype" value="${env.OSTYPE}">
		<isset property="env.OSTYPE" />
	</condition>
	<condition property="ostype" value="env.OSTYPE_inaccessable">
		<not>
			<isset property="env.OSTYPE" />
		</not>
	</condition>

	<!--Set the dyldpath property <var name="dyldpath" value="${env.DYLD_FALLBACK_LIBRARY_PATH}"/>-->
	<condition property="dyldpath" value="${env.DYLD_FALLBACK_PATH}">
		<isset property="env.DYLD_FALLBACK_PATH" />
	</condition>
	<condition property="dyldpath" value="env.DYLD_FALLBACK_PATH_inaccessible">
		<not>
			<isset property="env.DYLD_FALLBACK_PATH" />
		</not>
	</condition>

	<path id="compile.classpath">
		<pathelement location="${classes.dir}" />
		<fileset dir="${basedir}/lib">
			<include name="json.jar" />
		</fileset>
	</path>

	<target name="targets">
		<echo message="targets are: targets, clean, prepare, generate.client.stub, generate.server.stub, build.server, build.client, server, and client" />
		<echo message="base directory is: ${basedir} and ostype is ${ostype}" />
		<echo message="execute cpp server with: ./bin/Message ${port.num}" />
		<echo message="execute cpp client with: ./bin/studentRPCClient http://${host.name}:${port.num}" />
	</target>

	<target name="clean">
		<delete dir="${classes.dir}" failonerror="false" />
		<delete dir="${obj.dir}" failonerror="false" />
		<delete dir="${dist.dir}" failonerror="false" />
		<delete dir="log" failonerror="false" />
		<delete file="log.txt" failonerror="false" />
		<delete file="logerrors.txt" failonerror="false" />
		<delete file="logpid.txt" failonerror="false" />
		<delete file="${src.dir}/server/messageserverstub.h" failonerror="false" />
		<delete file="${src.dir}/client/messageclientstub.h" failonerror="false" />
	</target>

	<target name="prepare">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<echo message="home defined as: ${env.HOME}" />
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${obj.dir}/client" />
		<mkdir dir="${obj.dir}/server" />
		<if>
			<isset property="env.USERNAME" />
			<then>
				<echo message="detected username is: ${env.USERNAME}" />
			</then>
			<elseif>
				<isset property="env.USER" />
				<then>
					<echo message="detected user is: ${env.USER}" />
				</then>
			</elseif>
		</if>
		<echo message="host name is: ${os.name}" />
		<echo message="host arch is: ${os.arch}" />
		<echo message="host version is: ${os.version}" />
		<echo message="base directory is: ${basedir}" />

		<!-- Platform identification -->
		<condition property="build.host.islinux">
			<and>
				<os family="unix" />
				<not>
					<contains string="${os.name}" substring="mac"
		                      casesensitive="false" />
				</not>
			</and>
		</condition>
		<condition property="build.host.platform" value="linux">
			<isset property="build.host.islinux" />
		</condition>

		<condition property="build.host.ismac">
			<and>
				<os family="unix" />
				<contains string="${os.name}" substring="mac" casesensitive="false"/>
			</and>
		</condition>
		<condition property="build.host.platform" value="mac">
			<isset property="build.host.ismac" />
		</condition>

		<fail unless="build.host.platform"
		            message="Building on ${os.name} is not supported" />
		<echo message="build.host.platform is: ${build.host.platform}"/>
		<if>
			<isset property="build.host.ismac"/>
			<then>
				<echo message="detected a mac host"/>
				<property name="cxxflag" value="-std=c++14"/>
				<property name="includepath" value="/opt/local/include:/usr/local/include"/>
				<property name="client.lib.path" value="/opt/local/lib"/>
				<property name="client.lib.list" value="c++,jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++"/>
				<property name="server.lib.path" value="/opt/local/lib"/>
				<property name="server.lib.list" value="c++,jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd"/>
			</then>
			<elseif>
				<isset property="build.host.islinux"/>
				<then>
					<echo message="detected a linux host"/>
					<property name="cxxflag" value="-std=c++14"/>
					<property name="includepath" value="/usr/local/include:/usr/include/jsoncpp"/>
					<property name="client.lib.path" value="/usr/local/lib"/>
					<property name="client.lib.list" value="jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++"/>
					<property name="server.lib.path" value="/usr/local/lib"/>
					<property name="server.lib.list" value="jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd,stdc++"/>
				</then>
			</elseif>
			<else>
				<echo message="failed to detect a host I know how to build on"/>
			</else>
		</if>
	</target>

	<target name="generate.client.stub" depends="prepare">
		<exec dir="${basedir}" executable="jsonrpcstub">
			<arg line="${json.file.name} --cpp-client=messageclientstub"/>
		</exec>
		<copy file="messageclientstub.h"
	            tofile="${src.dir}/client/messageclientstub.h"/>
		<delete file="messageclientstub.h"/>
	</target>

	<target name="generate.server.stub" depends="prepare">
		<exec dir="${basedir}" executable="jsonrpcstub">
			<arg line="${json.file.name} --cpp-server=messageserverstub"/>
		</exec>
		<copy file="messageserverstub.h"
	            tofile="${src.dir}/server/messageserverstub.h"/>
		<delete file="messageserverstub.h"/>
	</target>

	<target name="build.server" depends="clean, prepare" description="Clean then build cpp server and cpp client">
		<cc outtype="executable" subsystem="console" outfile="${dist.dir}/Message" objdir="${obj.dir}">
			<compilerarg value="-std=c++14" />
			<includepath>
				<dirset dir="/" includes="usr/include,usr/local/include" />
			</includepath>
			<libset dir="/usr/lib" libs="stdc++,fltk" />
			<fileset dir="${src.cpp.dir}/server/" includes="MessageGui.cpp, Message.cpp" />
		</cc>
	</target>
	
	<target name="build.client" depends="clean, prepare" description="Clean then build cpp client">
		<cc outtype="executable" subsystem="console" outfile="${dist.dir}/Message" objdir="${obj.dir}">
			<compilerarg value="-std=c++14" />
			<includepath>
				<dirset dir="/" includes="usr/include,usr/local/include" />
			</includepath>
			<libset dir="/usr/lib" libs="stdc++,fltk" />
			<fileset dir="${src.cpp.dir}/client/" includes="Client.cpp" />
		</cc>
	</target>

	<target name="server" depends="build.server">
		<exec executable="./bin/Message" />
	</target>
	
	<target name="client" depends="build.server">
		<exec executable="./dir/Client" />
	</target>

</project>
